1.Declaration of class and node...

public class LL_Implementation{
	private static Node head;
	public class Node{
		int data;
		Node next;
		public Node(int data) {
			this.data = data;
			this.next = null;
		}
	}
  
  2. Insering a node at the beging of the linkedlist...
  
  public void addFirst(String data) {
		Node newNode = new Node(data);
		if(head == null) {
			head = newNode;
			return;
		}
		newNode.next = head;
		head = newNode;
	}
  
  3.Inserint a node at the last of the linkedlist...
  
  public void addLast(String data) {
		Node newNode = new Node(data);
		if(head == null) {
			head = newNode;
			return;
		}
		Node currNode = head;
		while(currNode.next != null) {
			currNode = currNode.next;
		}
		currNode.next = newNode;
	}
  
  4.Inserint a node at a particular index of the linkedlist...
  
  public Node addNode(int position, int data) {
		Node newNode = new Node(data);
		Node currNode = head;
		if(head == null) {
			head = newNode;
			return head;
		}
		else if(position == 0) {
			newNode.next = head;
			head = newNode;
			return head;
		}
		for(int i=0; i<position-1; i++) {
			currNode = currNode.next;
		}
		newNode.next = currNode.next;
		currNode.next = newNode;
		return head;
	}
  
5.reverse the whole linkedlist...

public void reverse() {
		if(head == null) {
			System.out.println("There is nothing to reverse...");
			return;
		}
		Node position = head;
		Node currNode = null;
		Node prevNode = null;
		while(position != null) {
			currNode = position;
			position = position.next;
			
			currNode.next = prevNode;
			prevNode = currNode;
			head = currNode;
		}
	}
  
 6.Check the linkedlist is pallindrome or not...
 
 	public boolean isPallindrome() {
		Stack<String> stack = new Stack<>();
		boolean flag = false;
		Node currNode = head;
		while(currNode != null) {
			stack.push(currNode.data);
			currNode = currNode.next;
		}
		
		currNode = head;
		while(currNode != null) {
			String element = stack.pop();
			if(currNode != null){
				flag = true;
		    currNode = currNode.next;
			}else {
				flag = false;
				break;
			}
		}
		return flag;
	}
 
 7. Getting the length of the linkedlist...
 
 public int getSize() {
		int count = 0;
		if(head == null) {
			return 0;
		}
		Node currNode = head;
		while(currNode != null) {
			count += 1;
			currNode = currNode.next;
		}
		return count;
	}
  
  8. Getting the middle of the linkedlist...
  
  public String getMiddle(){
		int size = getSize();
		Node currNode = head;
		if(size % 2 == 0) {
			int mid = (size / 2) -1;
			while(mid != 0) {
				currNode = currNode.next;
				mid--;
			}
			return currNode.data;
		}
		int mid = (size / 2);
		while(mid != 0) {
			currNode = currNode.next;
			mid--;
		}
		return currNode.data;
	}
  
  9.Deleting a node from the begining of the linkedlist....
  
  public void deleteFirst() {
		if(head == null) {
			System.out.println("There is nothing to delete...");
			return;
		}
		head = head.next;
	}
  
 10.Deleting a node from the ending of the linkedlist....
 
 public void deleteLast() {
		if(head == null) {
			System.out.println("There is nothing to delete...");
			return;
		}
		Node secondLast = head;
		Node lastNode = head.next;
		
		while(lastNode.next != null) {
			secondLast = secondLast.next;
			lastNode = lastNode.next;
		}
		secondLast.next = null;
	}
  
  
  11.Checking the loop is a loop or not...
  
  public boolean checkLoop() {
		if(head == null) {
			return false;
		}
		HashSet<Node> set = new HashSet<>();
		while(head != null) {
			if(set.contains(head)) {
				return true;
			}
			set.add(head);
			head = head.next;
		}
		return false;
	}
	   
  12. Delete the nodes which have the data lessthan the next consecutive node....
  Given Linked List :
 1 → 2 → 5 → 4 → 3 → 6 → 7 → 8 → NULL
 After Delete Linked List :
 5 → 4 → 8 → NULL
  
  public Node delLessNodes() {
		if(head == null) {
			return null;
		}
		Node currNode = head;
		Node prevNode = null;
		while(currNode != null && currNode.next != null) {
			if(currNode.next.data > currNode.data) {
				currNode = currNode.next;	
				if(prevNode == null) {
					head = currNode;
				}else {
					prevNode.next = currNode;
				}
			}else {
				prevNode = currNode;
				currNode = currNode.next;
			}
		}
		return head;
	}
	   
  13.Searching a particular node from the linkedlist....
  
  public int search(String data) {
		int index = 0;
		if(head == null) {
			return -1;
		}
		Node currNode = head;
		while(currNode != null) {
			if(currNode.data == data) {
				return index;
			}
			index++;
			currNode = currNode.next;
		}
		return index;
	}
  
  14. Removing duplicate from a sorted list...
  
  public Node removeDuplicate() {
	   if(head == null) {
			System.out.println("There is nothing to remove...");
			return null;
		}
	   Node currNode = head;
	   while(currNode != null  &&  currNode.next != null) {
		   if(currNode.data == currNode.next.data) {
			   
			   currNode.next = currNode.next.next;
		   }
		   else {
			   currNode = currNode.next;     
		   }
	   }
	return currNode;
   }
  
  15. Printing or displaying the all the list of linkedlist...
  
  public void printList() {
		if(head == null) {
			System.out.println("There is nothing to print...");
			return;
		}
		Node currNode = head;
		while(currNode != null) {
			System.out.println(currNode.data);
			currNode = currNode.next;
		}
	}
	
16. Here comes the main method...... 	
	public static void main(String []args) {
		LL_Implementation list = new LL_Implementation();
		list.addNode(0,"Sidhartha");
		list.addNode(1,"Dipika");
		list.addNode(2,"Sidhartha");
//		System.out.println(list.getSize());

//		if(list.isPallindrome()) {
//			System.out.println("The list is a pallindrome...");
//		}else {
//			System.out.println("The list is not a pallindrome...");
//		}
		System.out.println(list.getMiddle());
		
		list.head.next.next.next.next = list.head;
		if(list.checkLoop()) {
			System.out.println("Loop found...");
		}else {
			System.out.println("Loop not found...");
		}
		list.printList();
	}
}
